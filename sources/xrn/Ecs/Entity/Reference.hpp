#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Ecs/Entity/Entity.hpp>
#include <xrn/Ecs/Entity/ConstReference.hpp>

///////////////////////////////////////////////////////////////////////////
// Forward declarations
///////////////////////////////////////////////////////////////////////////
namespace xrn::ecs::component { class Container; }



namespace xrn::ecs::entity {

///////////////////////////////////////////////////////////////////////////
/// \brief Contains all the entities
/// \ingroup ecs-entity
///
/// \include Reference.hpp <xrn/Ecs/Entity/Reference.hpp>
///
/// Refers to an ::xrn::ecs::entity::Entity, the difference between a
/// ::xrn::ecs::entity::Reference and a
/// ::xrn::ecs::entity::ConstReference is that
/// ::xrn::ecs::entity::Reference contains a reference to a
/// ::xrn::ecs::component::Container that is passed to the constructor. It
/// allows actions like addComponent() and removeComponent() that are not
/// possible with ::xrn::ecs::entity::ConstReference.
///
/// Usage example:
/// \code
/// using namespace ::xrn::ecs::component::test;
///
/// ::xrn::ecs::component::Container components;
/// ::xrn::ecs::entity::Entity entity;
/// ::xrn::ecs::entity::Reference ref{ entity, components }; // argument order does not matter
///
/// entity.hasComponent<ComponentA>(); // false
/// entity.hasComponent<ComponentB>(); // false
/// ref.hasComponent<ComponentA>(); // false
/// ref.hasComponent<ComponentB>(); // false
///
/// ref.addComponents<ComponentA, ComponentB>();
///
/// entity.hasComponents<ComponentA, ComponentB>() // true;
/// ref.hasComponents<ComponentA, ComponentB>() // true;
/// \endcode
///
/// \see ::xrn::ecs::entity::Entity, ::xrn::ecs::entity::ConstReference,
///      ::xrn::ecs::component::Container
///
///////////////////////////////////////////////////////////////////////////
class Reference {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Null constructor
    ///
    /// Constructs a ::xrn::ecs::entity::ConstReference but does not store
    /// anything. This reference will be invalid.
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline Reference() noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Constructs a ::xrn::ecs::entity::Reference from an ::xrn::ecs::entity::Entity and
    /// a ::xrn::ecs::component::Container.
    ///
    /// \param components Container containing the entity's components
    /// \param entity Entity that the class is refering to
    ///
    /// \see ::xrn::ecs::entity::Entity, ::xrn::ecs::component::Container
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline explicit Reference(
        ::xrn::ecs::entity::Entity& entity,
        ::xrn::ecs::component::Container& components
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor with argument order reversed
    ///
    /// Constructs a ::xrn::ecs::entity::Reference from an ::xrn::ecs::entity::Entity and
    /// a ::xrn::ecs::component::Container.
    ///
    /// \param components Container containing the entity's components
    /// \param entity Entity that the class is refering to
    ///
    /// \see ::xrn::ecs::entity::Entity, ::xrn::ecs::component::Container
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline explicit Reference(
        ::xrn::ecs::component::Container& components,
        ::xrn::ecs::entity::Entity& entity
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Add
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds a single component or ability
    ///
    /// \tparam ComponentTypes Type of components to emplace inside the
    ///         ::xrn::ecs::entity::Entity when creating it
    ///
    /// \see ::xrn::ecs::component::Container
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isEcsRegistered... Types
    > void add();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds a single component
    ///
    /// Creates the component by perfect forwading the arguments to the
    /// constructor of the component.
    ///
    /// \tparam ComponentTypes Type of components to emplace inside the
    ///         ::xrn::ecs::entity::Entity when creating it
    ///
    /// \param args Arguments to perfect forward
    ///
    /// \see ::xrn::ecs::component::Container
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent ComponentType
    > void addComponent(
        auto&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds multiple components
    ///
    /// \tparam ComponentTypes Type of components to emplace inside the
    ///         ::xrn::ecs::entity::Entity when creating it
    ///
    /// \see ::xrn::ecs::component::Container
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
    > void addComponents();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds a single component
    ///
    /// Moves the components instead of creating them.
    ///
    /// \param components Components to emplace
    ///
    /// \see ::xrn::ecs::component::Container
    ///
    ///////////////////////////////////////////////////////////////////////////
    void addComponents(
        ::xrn::ecs::detail::constraint::isComponent auto&&... components
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds a single ability
    ///
    /// \tparam ComponentTypes Type of abilitys to emplace inside the
    ///         ::xrn::ecs::entity::Entity when creating it
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isAbility AbilityType
    > void addAbility();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds multiple abilities
    ///
    /// \tparam ComponentTypes Type of abilitys to emplace inside the
    ///         ::xrn::ecs::entity::Entity when creating it
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isAbility... AbilityTypes
    > void addAbilities();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Has
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the entity has the components or abilities
    ///
    /// \tparam Types Types to search
    ///
    /// \Return True if the components or abilities are contained by the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isEcsRegistered... Types
    > [[ nodiscard ]] auto has() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the entity has the component
    ///
    /// \tparam ComponentType Type of component to search
    ///
    /// \Return True if the component is contained by the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent ComponentType
    > [[ nodiscard ]] auto hasComponent() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the entity has all the components
    ///
    /// \tparam ComponentTypes Type of components to search
    ///
    /// \Return True if the components are all contained by the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
    > [[ nodiscard ]] auto hasComponents() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the entity has the ability
    ///
    /// \tparam ComponentType Type of ability to search
    ///
    /// \Return True if the ability is contained by the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isAbility AbilityType
    > [[ nodiscard ]] auto hasAbility() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the entity has all the abilities
    ///
    /// \tparam ComponentTypes Type of abilities to search
    ///
    /// \Return True if the abilities are all contained by the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isAbility... AbilityTypes
    > [[ nodiscard ]] auto hasAbilities() const
        -> bool;


    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Remove
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    /// \brief Remove multiple components and abilities from the entity
    ///
    /// \tparam Types Type of components and entities to remove
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isEcsRegistered... Types
    > void remove();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Remove all components and abilities from the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline void removeAbilitiesAndComponents();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Remove a single component from the entity
    ///
    /// \tparam ComponentTypes Type of components to remove
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent ComponentType
    > void removeComponent();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Remove multiple components from the entity
    ///
    /// \tparam ComponentTypes Type of components to remove
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
    > void removeComponents();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Remove all components from the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline void removeComponents();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Remove a single ability from the entity
    ///
    /// \tparam ComponentTypes Type of ability to remove
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isAbility AbilityType
    > void removeAbility();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Remove multiple abilities from the entity
    ///
    /// \tparam ComponentTypes Type of abilities to remove
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isAbility... AbilityTypes
    > void removeAbilities();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Remove all abilities from the entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    inline void removeAbilities();



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the reference is valid
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] inline auto isValid() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the signature of the ::xrn::ecs::entity::Entity referred
    ///
    /// \see ::xrn::ecs::entity::Entity, ::xrn::ecs::Signature
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] inline auto getSignature() const
        -> const ::xrn::ecs::Signature&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the Id of the ::xrn::ecs::entity::Entity referred
    ///
    /// \see ::xrn::ecs::entity::Entity, ::xrn::util::BasicForwardId
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] inline auto getId() const
        -> ::xrn::Id;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the ::xrn::ecs::entity::Entity referred
    ///
    /// \see ::xrn::ecs::entity::Entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] inline auto get()
        -> ::xrn::ecs::entity::Entity&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the ::xrn::ecs::entity::Entity referred
    ///
    /// \see ::xrn::ecs::entity::Entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] inline auto get() const
        -> const ::xrn::ecs::entity::Entity&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Implicitly converts the reference into the ::xrn::ecs::entity::Entity
    /// referred
    ///
    /// \see ::xrn::ecs::entity::Entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] inline operator const ::xrn::ecs::entity::Entity&() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Implicitly converts the mutable reference into a
    /// ::xrn::ecs::entity::ConstReference
    ///
    /// \see ::xrn::ecs::entity::ConstReference
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] inline operator ::xrn::ecs::entity::ConstReference() const;




private:

    ::xrn::ecs::component::Container* m_components;
    ::xrn::ecs::entity::Entity* m_entity;

};

} // namespace xrn::ecs::entity



///////////////////////////////////////////////////////////////////////////
// Header-implimentation
///////////////////////////////////////////////////////////////////////////
#include <xrn/Ecs/Entity/Reference.impl.hpp>
