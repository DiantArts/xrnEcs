#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::ConstReference::ConstReference() noexcept
    : m_entity{ nullptr }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::ConstReference::ConstReference(
    const ::xrn::ecs::entity::Entity& entity
) noexcept
    : m_entity{ &entity }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// HasComponents
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isEcsRegistered... Types
> auto ::xrn::ecs::entity::ConstReference::has() const
    -> bool
{
    return m_entity->has<Types...>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent ComponentType
> auto ::xrn::ecs::entity::ConstReference::hasComponent() const
    -> bool
{
    return m_entity->hasComponent<ComponentType>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> auto ::xrn::ecs::entity::ConstReference::hasComponents() const
    -> bool
{
    return m_entity->hasComponents<ComponentTypes...>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isAbility AbilityType
> auto ::xrn::ecs::entity::ConstReference::hasAbility() const
    -> bool
{
    return m_entity->hasAbility<AbilityType>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isAbility... AbilityTypes
> auto ::xrn::ecs::entity::ConstReference::hasAbilities() const
    -> bool
{
    return m_entity->hasAbilities<AbilityTypes...>();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Getters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] auto ::xrn::ecs::entity::ConstReference::isValid() const
    -> bool
{
    return m_entity != nullptr;
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::ConstReference::getSignature() const
    -> const ::xrn::ecs::Signature&
{
    return m_entity->getSignature();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::ConstReference::getId() const
    -> ::xrn::Id
{
    return m_entity->getId();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::ConstReference::get() const
    -> const ::xrn::ecs::entity::Entity&
{
    return *m_entity;
}

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::ConstReference::operator const ::xrn::ecs::entity::Entity&() const
{
    return *m_entity;
}
