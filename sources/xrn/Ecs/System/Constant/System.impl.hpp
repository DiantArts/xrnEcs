#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename FunctionType
> constexpr ::xrn::ecs::system::constant::System<FunctionType>::System(
    FunctionType function
)
    : m_function{ function }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Run
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename FunctionType
> constexpr void ::xrn::ecs::system::constant::System<FunctionType>::run(
    ::xrn::Time deltaTime,
    const ::xrn::ecs::entity::Container& entities
) const
{
    auto isMatching{ [*this](const ::xrn::ecs::Entity& entity) {
        return entity.getSignature().contains(m_signature);
    } };

    for (auto& entity : entities | ::std::views::filter(isMatching)) {
        // get every args into a tupple
        using TupleArgumentTypes = ::xrn::ecs::detail::meta::Function<FunctionType>::Arguments::Type;
        auto args{ ::xrn::ecs::system::detail::SystemFiller<TupleArgumentTypes>::fill(
            deltaTime, entities.getComponentContainer(), entity
        ) };

        // exec the function
        ::std::apply(m_function, args);
    }
}

///////////////////////////////////////////////////////////////////////////
template <
    typename FunctionType
> constexpr void ::xrn::ecs::system::constant::System<FunctionType>::operator()(
    ::xrn::Time deltaTime,
    const ::xrn::ecs::entity::Container& entities
) const
{
    this->run(deltaTime, entities);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Others
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename FunctionType
> consteval auto ::xrn::ecs::system::constant::System<FunctionType>::getSignature()
    -> ::xrn::ecs::Signature
{
    return m_signature;
}
