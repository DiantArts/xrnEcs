#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Run
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::system::Container::run(
    ::xrn::Time t,
    ::xrn::ecs::entity::Container& entities
)
{
    for (auto& system : m_systems) {
        system->run(t, entities);
    }
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Others
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::system::Container::emplace(
    auto function
) -> ::xrn::ecs::ASystem&
{
    m_systems.push_back(::std::make_unique<::xrn::ecs::System<decltype(function)>>(function));
    return *m_systems.back();
}
