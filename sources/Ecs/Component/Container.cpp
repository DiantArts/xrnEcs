///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <Ecs/Component.hpp>
#include <Ecs/Entity.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::Container::Container()
    : m_memoryManager{ m_data }
    , m_data{}
{
    m_data.reserve(Container::defaultBaseSize);
}

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::Container::Container(
    ::std::size_t size
)
    : m_memoryManager{ m_data }
    , m_data{}
{
    m_data.reserve(size);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::Container::~Container()
{
    this->clearAll();
}

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::Container::Container(
    ::xrn::ecs::component::Container&& that
) noexcept = default;

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::component::Container::operator=(
    ::xrn::ecs::component::Container&& that
) noexcept
    -> ::xrn::ecs::component::Container& = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Remove
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::Container::removeAll(
    ::xrn::ecs::entity::Entity& entity
)
{
    ::xrn::ecs::component::detail::ForEach::template runIfSignature<
        []<::xrn::ecs::detail::constraint::isComponent ComponentType>(auto& components, auto& entity){
            components.template remove<ComponentType>(entity);
        }
    >(entity.getSignature(), *this, entity);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Clear
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::Container::clear()
{
    this->clearAll();
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::Container::clearAll()
{
    m_memoryManager.clearAll();
}
