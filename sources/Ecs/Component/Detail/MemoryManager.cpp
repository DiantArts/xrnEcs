///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <Ecs/Component/Detail/MemoryManager.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::detail::MemoryManager::MemoryManager(
    ::std::vector<::std::byte>& data
)
    : m_data{ data }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::detail::MemoryManager::~MemoryManager() noexcept
{
    this->clearAll();
}

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::detail::MemoryManager::MemoryManager(
    ::xrn::ecs::component::detail::MemoryManager&& that
) noexcept = default;

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::component::detail::MemoryManager::operator=(
    ::xrn::ecs::component::detail::MemoryManager&& that
) noexcept
    -> ::xrn::ecs::component::detail::MemoryManager&
{
    this->swap(::std::move(that));
    return *this;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::detail::MemoryManager::swap(
    ::xrn::ecs::component::detail::MemoryManager&& that
) noexcept
{
    ::std::swap(m_data, that.m_data);
    ::std::swap(m_indexTable, that.m_indexTable);
    ::std::swap(m_deletedTable, that.m_deletedTable);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Basic operations
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::detail::MemoryManager::clearAll()
{
    auto nonDeletedComponents{ [](const auto& componentInfos){ return componentInfos.ownerId; } };
    for (auto& componentInfos : m_indexTable | ::std::views::filter(nonDeletedComponents)) {
        ::xrn::ecs::component::detail::ForEach::template find<
            []<::xrn::ecs::detail::constraint::isComponent ComponentType>(auto* addr){
                ::std::bit_cast<ComponentType*>(addr)->~ComponentType();
            }
        >(componentInfos.id, &m_data[componentInfos.index]);
        componentInfos.ownerId = 0;
    }
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// private static elements
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::detail::MemoryManager::OwnedComponentInfo::OwnedComponentInfo(
    ::xrn::ecs::component::detail::MemoryManager::ComponentId thatId,
    ::xrn::ecs::component::detail::MemoryManager::ComponentIndex thatIndex,
    ::xrn::ecs::component::detail::MemoryManager::EntityId thatOwnerId
)
    : ::xrn::ecs::component::detail::MemoryManager::ComponentInfo{ .id = thatId, .index = thatIndex }
    , ownerId{ thatOwnerId }
{}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::component::detail::MemoryManager::OwnedComponentInfo::operator<=>(
    const ::xrn::ecs::component::detail::MemoryManager::OwnedComponentInfo& other
) const
    -> ::std::strong_ordering
{
    return this->id <=> other.id;
}
