#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Macro definition
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Declares a component
///
/// Registers the type given as macro parameter as part of the components
/// of the program.
/// It is however unlikely that this macro will be used as it only allows
/// to create a component in the base namespace. TO create a component in
/// a specific namespace, please use DECLARE_COMPONENT_IN_NAMESPACE()
///
/// \warning Using this macro outside of the files included bellow next to
/// the base file "Ecs/Component/Declaration.hpp" leads to undefined
/// behaviors.
///
/// \see DECLARE_COMPONENT_IN_NAMESPACE()
///
///////////////////////////////////////////////////////////////////////////
#define DECLARE_COMPONENT(className) \
    class className; \
    template <> \
    class xrn::ecs::component::declaration::detail::WithId<className> { \
    public: \
        [[ nodiscard ]] static inline constexpr ::std::size_t getId() { return m_id; } \
    private: \
        static inline constexpr auto m_id{ \
            __COUNTER__ - ::xrn::ecs::component::declaration::detail::baseIdCounter \
        }; \
    }

///////////////////////////////////////////////////////////////////////////
/// \brief Declares a component in a namespace
///
/// Same as DECLARE_COMPONENT() but in a namespace given as first parameter
/// of macro. This macro Registers the type given as macro parameter as
/// part of the components of the program.
///
/// \warning Using this macro outside of the files included bellow next to
/// the base file "Ecs/Component/Declaration.hpp" leads to undefined
/// behaviors.
///
/// \see DECLARE_COMPONENT_IN_NAMESPACE()
///
///////////////////////////////////////////////////////////////////////////
#define DECLARE_COMPONENT_IN_NAMESPACE(namespaceName, className) \
    namespace namespaceName { class className; } \
    template <> \
    class xrn::ecs::component::declaration::detail::WithId<namespaceName::className> { \
    public: \
        [[ nodiscard ]] static inline constexpr ::std::size_t getId() { return m_id; } \
    private: \
        static inline constexpr const auto m_id{ \
            __COUNTER__ - ::xrn::ecs::component::declaration::detail::baseIdCounter \
        }; \
    }



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Start the component declaration
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// Declares 'WithId' class and initializes baseIdCounter
///////////////////////////////////////////////////////////////////////////
namespace xrn::ecs::component::declaration::detail {
    template <typename> class WithId;
    static inline constexpr const ::std::size_t baseIdCounter{ __COUNTER__ + 1 };
} // namespace xrn::ecs::component::declaration::detail



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// User-defined Components
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// contains the user-defined components using the macros declared
// above.
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// Ecs/Component/Declaration.hpp is the base file, but more can be added
// and included here.
///////////////////////////////////////////////////////////////////////////
#include <Ecs/Component/Declaration.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Test components (details hidden)
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// Declares the components used for unit testing. Can be concidered as
/// implemetation details.
///////////////////////////////////////////////////////////////////////////
#ifdef TEST
DECLARE_COMPONENT_IN_NAMESPACE(xrn::ecs::component::test, Movable);
DECLARE_COMPONENT_IN_NAMESPACE(xrn::ecs::component::test, Transformable);
DECLARE_COMPONENT_IN_NAMESPACE(xrn::ecs::component::test, Transformable2d);
#endif // TEST



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Start the component declaration
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// Declares 'WithId' class and initializes baseIdCounter
///////////////////////////////////////////////////////////////////////////
namespace xrn::ecs::component::declaration::detail {
    static inline constexpr const ::std::size_t numberOfIds{
        __COUNTER__ - ::xrn::ecs::component::declaration::detail::baseIdCounter
    };
} // namespace xrn::ecs::component::declaration::detail

namespace xrn::ecs::component {
    static inline constexpr const ::xrn::Id maxId{ ::xrn::ecs::component::declaration::detail::numberOfIds };
} // namespace xrn::ecs::component

///////////////////////////////////////////////////////////////////////////
/// Macros undefinition
///////////////////////////////////////////////////////////////////////////
#undef DECLARE_COMPONENT
#undef DECLARE_COMPONENT_IN_NAMESPACE
