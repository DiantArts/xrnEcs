#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <Util/Id.hpp>



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Start the component declaration
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// Declares 'IdHandler' class and initializes baseIdCounter
///////////////////////////////////////////////////////////////////////////
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
namespace xrn::ecs::component::declaration::detail {
    template <typename> class IdHandler;
    template <::xrn::Id::Type id> struct IdInfo;
    template <typename T> struct IsComponent : public ::std::false_type {};
    static inline constexpr const ::std::size_t baseIdCounter{ __COUNTER__ + 1 };
    template <typename T> class AComponent
        : public ::xrn::ecs::component::declaration::detail::IdHandler<::std::remove_cvref_t<T>>
    {
    public:
        virtual ~AComponent() = 0; // TODO: rule of 5
    };
} // namespace xrn::ecs::component::declaration::detail
#pragma GCC diagnostic pop
template <typename T> ::xrn::ecs::component::declaration::detail::AComponent<T>::~AComponent() = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Macro definition
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Declares a component in a namespace
///
/// Registers the type given as macro parameter as part of the components
/// of the program.
///
/// \warning Using this macro outside of the files included bellow next to
/// the base file "Ecs/Component/Declaration.hpp" leads to undefined
/// behaviors.
///
///////////////////////////////////////////////////////////////////////////
#define COMPONENT(className) \
    class className; \
    template <> class xrn::ecs::component::declaration::detail::IdHandler<className> { \
    public: [[ nodiscard ]] static inline consteval ::std::size_t getId() { return m_id; } \
    private: static inline constexpr const auto m_id{ \
            __COUNTER__ - ::xrn::ecs::component::declaration::detail::baseIdCounter \
        }; \
    }; \
    template < \
    > struct xrn::ecs::component::declaration::detail::IdInfo< \
        ::xrn::ecs::component::declaration::detail::IdHandler<className>::getId() \
    > { using Type = className; }; \
    template <> \
    struct xrn::ecs::component::declaration::detail::IsComponent<className> : public ::std::true_type \
    {}; \
    class className : public ::xrn::ecs::component::declaration::detail::AComponent<className> \

#define COMPONENT_IN_NAMESPACE(namespaceName, className) \
    class className; \
    } /* leaving namespace */ \
    template <> class xrn::ecs::component::declaration::detail::IdHandler<namespaceName::className> { \
    public: [[ nodiscard ]] static inline consteval ::std::size_t getId() { return m_id; } \
    private: static inline constexpr const auto m_id{ \
            __COUNTER__ - ::xrn::ecs::component::declaration::detail::baseIdCounter \
        }; \
    }; \
    template < \
    > struct xrn::ecs::component::declaration::detail::IdInfo< \
        ::xrn::ecs::component::declaration::detail::IdHandler<namespaceName::className>::getId() \
    > { using Type = namespaceName::className; }; \
    template <> \
    struct xrn::ecs::component::declaration::detail::IsComponent<namespaceName::className> : public ::std::true_type \
    {}; \
    namespace namespaceName { /* reentering namespace */ \
    class className : public ::xrn::ecs::component::declaration::detail::AComponent<className> \



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Test components (details hidden)
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// Declares the components used for unit testing. Can be concidered as
/// implemetation details.
///////////////////////////////////////////////////////////////////////////
#ifdef TEST
#include <Ecs/Component/Detail/TestDeclaration.hpp>
#endif // TEST



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// User-defined Components
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// contains the user-defined components using the macros declared
// above.
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// Ecs/Component/Declaration.hpp is the base file, but more can be added
// and included here.
///////////////////////////////////////////////////////////////////////////
#ifndef TEST
#include <Ecs/Component/Declaration.hpp>
#endif // aTEST



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Start the component declaration
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// Declares 'IdHandler' class and initializes baseIdCounter
///////////////////////////////////////////////////////////////////////////
namespace xrn::ecs::component {
    static inline constexpr const auto maxId{
        __COUNTER__ - ::xrn::ecs::component::declaration::detail::baseIdCounter
    };
    template <auto id> using IdInfo = ::xrn::ecs::component::declaration::detail::IdInfo<id>;
} // namespace xrn::ecs

namespace xrn::ecs {
    template <typename T> using IsComponent = xrn::ecs::component::declaration::detail::IsComponent<T>;
    template <typename T> inline constexpr const auto IsComponent_v = xrn::ecs::IsComponent<T>::value;
    template <typename T> inline constexpr const auto isComponent = xrn::ecs::IsComponent<T>::value;
} // namespace xrn::ecs



///////////////////////////////////////////////////////////////////////////
/// Macros undefinition
///////////////////////////////////////////////////////////////////////////
#undef COMPONENT
#undef COMPONENT
