#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Declares components
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// To use an other file (or multiple files) to declare components, please go
// inside the "/Ecs/Component/Detail/Declaration.hpp" file, and look at the
// "User-defined Components" sections. It is where the component declaration
// files are included and used.
// Components are forwarded declared here, but can be defined else where.
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Drawable component.
///
///////////////////////////////////////////////////////////////////////////
namespace xrn::ecs::component::test {



///////////////////////////////////////////////////////////////////////////
/// \brief Movable component.
///
///////////////////////////////////////////////////////////////////////////
COMPONENT_IN_NAMESPACE(xrn::ecs::component::test, ComponentA) {
public:
    auto operator<=>(const ::xrn::ecs::component::test::ComponentA& other) const
    { return value <=> other.value; }
    auto operator==(const ::xrn::ecs::component::test::ComponentA& other) const
    { return value == other.value; }
    int value{ 0 };
};



///////////////////////////////////////////////////////////////////////////
/// \brief Transformable component.
///
///////////////////////////////////////////////////////////////////////////
COMPONENT_IN_NAMESPACE(xrn::ecs::component::test, ComponentB) {
public:
    ComponentB(int val = 0) : value{ val } {}
    auto operator<=>(const ::xrn::ecs::component::test::ComponentB& other) const
    { return value <=> other.value; }
    int value{ 0 };
};



///////////////////////////////////////////////////////////////////////////
/// \brief Benchmark 100 ints component.
///
///////////////////////////////////////////////////////////////////////////
COMPONENT_IN_NAMESPACE(xrn::ecs::component::test, Benchmark100ints) {
public:
    int value[100];
};


} // namespace xr::ecs::component::test
