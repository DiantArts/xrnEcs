#pragma once

namespace xrn::ecs {



///////////////////////////////////////////////////////////////////////////
/// \brief Representation of the time in the xrn Project
/// \ingroup ecs
///
/// \include Time.hpp <Ecs/Time.hpp>
///
/// This class is a part of the ::xrn::ecs Library designed to facilitate
/// usage of ECS architectures
///
/// ::xrn::ecs::Time structure's purpuse is to represent and uniform
/// time manipulations accross the xrn Project
/// Its usage is straight forward as it just contains a Time value, gettable
/// as seconds or milliseconds. By default, xrn projects manipulates
/// milliseconds
/// The class can be constructed by the factories createAsSeconds() and
/// createAsMilliseconds()
/// This class is mostly used by ::xrn::ecs::Clock
///
/// Usage example:
/// \code
/// auto t1{ ::xrn::ecs::Time::createAsSeconds(0.1f) };
/// auto t1{ t1.getAsMilliseconds() }; // 100
///
/// ::xrn::ecs::Time t2{ 30 }:
/// Int64 micro = t2.asMicroseconds(); // 30000
///
/// sf::Time t3 = sf::microseconds(-800000);
/// float sec = t3.asSeconds(); // -0.8
/// \endcode
///
/// \see ::xrn::ecs::Clock
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T = float
> class BasicTime {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // static elements
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Type internally contained by the class ::xrn::ecs::Time
    ///
    ///////////////////////////////////////////////////////////////////////////
    using Type = T;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a ::xrn::ecs::Time from a value evaluated as seconds
    ///
    /// \param amount Value contructed from the amount of seconds
    ///
    /// \see createAsMilliseconds(), createAsMicroseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static auto createAsSeconds(
        BasicTime<T>::Type amount
    ) -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a ::xrn::ecs::Time from a value evaluated as
    /// milliseconds
    ///
    /// \param amount Value contructed from the amount of milliseconds
    ///
    /// \see createAsSeconds(), createAsMicroseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static auto createAsMilliseconds(
        BasicTime<T>::Type amount
    ) -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a ::xrn::ecs::Time from a value evaluated as
    /// microseconds
    ///
    /// \param amount Value contructed from the amount of microseconds
    ///
    /// \see createAsSeconds(), createAsMilliseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] static auto createAsMicroseconds(
        BasicTime<T>::Type amount
    ) -> ::xrn::ecs::BasicTime<T>;



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor from a Time::Type
    ///
    /// Constructs a ::xrn::ecs::Time containing a point in time
    ///
    /// \param amount Time in milliseconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit BasicTime(
        auto amount
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Comparison
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Compares with an ::xrn::ecs::Time values
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator<=>(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) const
        -> ::std::weak_ordering;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Compares with an internal representation of an ::xrn::ecs::Time
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator<=>(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::std::partial_ordering;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Get
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convertion to the type internally stored
    ///
    /// \see get(), getAsMilliseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] operator BasicTime<T>::Type() noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as it's internally stored
    ///
    /// \return Time in milliseconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto get() const
        -> BasicTime<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as seconds
    ///
    /// \return Value as second as the internally stored type
    ///
    /// \see get(), getAsMilliseconds(), getAsMicroseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getAsSeconds() const
        -> BasicTime<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as milliseconds
    ///
    /// \return Value as second as the internally stored type
    ///
    /// \see get(), getAsSeconds(), getAsMicroseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getAsMilliseconds() const
        -> BasicTime<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as milliseconds
    ///
    /// \return Value as second as the internally stored type
    ///
    /// \see get(), getAsSeconds(), getAsMilliseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getAsMicroseconds() const
        -> BasicTime<T>::Type;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Set
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the internal point time value to a new one
    ///
    /// \param amount New time in milliseconds
    ///
    /// \see set()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator=(
        const BasicTime<T>::Type& amount
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the internal point time value to a new one
    ///
    /// \param amount New time in milliseconds
    ///
    /// \see operator=()
    ///
    ///////////////////////////////////////////////////////////////////////////
    void set(
        const ::xrn::ecs::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the internal point time value to a new one
    ///
    /// \param amount New time in milliseconds
    ///
    /// \see operator=()
    ///
    ///////////////////////////////////////////////////////////////////////////
    void set(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Add
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds ::xrn::ecs::Time given as parameter
    ///
    /// \param rhs Time to add
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator+=(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds time as milliseconds given as parameter
    ///
    /// \param rhs Time to add in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator+=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds ::xrn::ecs::Time given as parameter
    ///
    /// Same as add, but does return a copy
    ///
    /// \param rhs Time to add
    ///
    /// \return New time added with \a rhs
    ///
    /// \see add()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator+(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds time as milliseconds given as parameter
    ///
    /// Same as add, but does return a copy
    ///
    /// \param rhs Time to add in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see add()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator+(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds ::xrn::ecs::Time given as parameter
    ///
    /// Adds the amount given as parameter.
    ///
    /// \param rhs Time to add
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void add(
        const ::xrn::ecs::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds time as milliseconds given as parameter
    ///
    /// Adds the amount given as parameter.
    ///
    /// \param rhs Time to add in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void add(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Sub
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts ::xrn::ecs::Time given as parameter
    ///
    /// \param rhs Time to substract
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator-=(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts time as milliseconds given as parameter
    ///
    /// \param rhs Time to substract in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator-=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts ::xrn::ecs::Time given as parameter
    ///
    /// Same as substract, but does return a copy
    ///
    /// \param rhs Time to substract
    ///
    /// \return New time added with \a rhs
    ///
    /// \see sub()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator-(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts time as milliseconds given as parameter
    ///
    /// Same as substract, but does return a copy
    ///
    /// \param rhs Time to substract in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see sub()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator-(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts ::xrn::ecs::Time given as parameter
    ///
    /// Substracts the amount given as parameter.
    ///
    /// \param rhs Time to substract
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void sub(
        const ::xrn::ecs::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts time as milliseconds given as parameter
    ///
    /// Substracts the amount given as parameter.
    ///
    /// \param rhs Time to substract in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void sub(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Mul
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates ::xrn::ecs::Time given as parameter
    ///
    /// \param rhs Time to multiply
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator*=(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates time as milliseconds given as parameter
    ///
    /// \param rhs Time to multiply in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator*=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates ::xrn::ecs::Time given as parameter
    ///
    /// Same as multiply, but does return a copy
    ///
    /// \param rhs Time to multiply
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mul()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator*(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates time as milliseconds given as parameter
    ///
    /// Same as multiply, but does return a copy
    ///
    /// \param rhs Time to multiply in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mul()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator*(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates ::xrn::ecs::Time given as parameter
    ///
    /// Multiplicates the amount given as parameter.
    ///
    /// \param rhs Time to multiply
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mul(
        const ::xrn::ecs::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates time as milliseconds given as parameter
    ///
    /// Multiplicates the amount given as parameter.
    ///
    /// \param rhs Time to multiply in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mul(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Div
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides ::xrn::ecs::Time given as parameter
    ///
    /// \param rhs Time to divide
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator/=(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides time as milliseconds given as parameter
    ///
    /// \param rhs Time to divide in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator/=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides ::xrn::ecs::Time given as parameter
    ///
    /// Same as divide, but does return a copy
    ///
    /// \param rhs Time to divide
    ///
    /// \return New time added with \a rhs
    ///
    /// \see div()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator/(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides time as milliseconds given as parameter
    ///
    /// Same as divide, but does return a copy
    ///
    /// \param rhs Time to divide in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see div()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator/(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides ::xrn::ecs::Time given as parameter
    ///
    /// Divides the amount given as parameter.
    ///
    /// \param rhs Time to divide
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void div(
        const ::xrn::ecs::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides time as milliseconds given as parameter
    ///
    /// Divides the amount given as parameter.
    ///
    /// \param rhs Time to divide in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void div(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Mod
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos ::xrn::ecs::Time given as parameter
    ///
    /// \param rhs Time to modulo
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator%=(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos time as milliseconds given as parameter
    ///
    /// \param rhs Time to modulo in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator%=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::ecs::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos ::xrn::ecs::Time given as parameter
    ///
    /// Same as modulo, but does return a copy
    ///
    /// \param rhs Time to modulo
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mod()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator%(
        const ::xrn::ecs::BasicTime<T>& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos time as milliseconds given as parameter
    ///
    /// Same as modulo, but does return a copy
    ///
    /// \param rhs Time to modulo in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mod()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator%(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::ecs::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos ::xrn::ecs::Time given as parameter
    ///
    /// Modulos the amount given as parameter.
    ///
    /// \param rhs Time to modulo
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mod(
        const ::xrn::ecs::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos time as milliseconds given as parameter
    ///
    /// Modulos the amount given as parameter.
    ///
    /// \param rhs Time to modulo in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mod(
        const BasicTime<T>::Type& amount
    );



private:

    BasicTime<T>::Type m_time;

};



} // namespace xrn::ecs



///////////////////////////////////////////////////////////////////////////
// Header-implimentation
///////////////////////////////////////////////////////////////////////////
#include <Ecs/Time.impl.hpp>



///////////////////////////////////////////////////////////////////////////
// Template specialization
///////////////////////////////////////////////////////////////////////////
namespace xrn::ecs { using Time = ::xrn::ecs::BasicTime<>; }
