///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// static elements
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> [[ nodiscard ]] constexpr auto ::xrn::ecs::entity::Entity::generate(
    ::xrn::ecs::component::Container& components
)
    -> ::xrn::ecs::entity::Entity
{
    ::xrn::ecs::entity::Entity entity;
    entity.addComponents<ComponentTypes...>(components);
    return entity;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Add components
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent ComponentType
> void ::xrn::ecs::entity::Entity::addComponent(
    ::xrn::ecs::component::Container& components,
    auto&&... args
)
{
    components.emplace<ComponentType>(m_id, ::std::forward<decltype(args)>(args)...);
    m_signature.set<ComponentType>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::entity::Entity::addComponents(
    ::xrn::ecs::component::Container& components
)
{
    components.emplaceMany<ComponentTypes...>(m_id);
    m_signature.set<ComponentTypes...>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::entity::Entity::addComponents(
    ::xrn::ecs::component::Container& componentsContainer,
    ComponentTypes&&... components
)
{
    componentsContainer.pushMany<ComponentTypes...>(m_id, ::std::forward<ComponentTypes>(components)...);
    m_signature.set<ComponentTypes...>();
}




///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Has components
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent ComponentType
> [[ nodiscard ]] auto ::xrn::ecs::entity::Entity::hasComponent() const
    -> bool
{
    return m_signature.contains<ComponentType>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> [[ nodiscard ]] auto ::xrn::ecs::entity::Entity::hasComponents() const
    -> bool
{
    return m_signature.contains<ComponentTypes...>();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Remove components
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent ComponentType
> void ::xrn::ecs::entity::Entity::removeComponent(
    ::xrn::ecs::component::Container& components
)
{
    components.remove<ComponentType>(m_id);
    m_signature.reset<ComponentType>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::entity::Entity::removeComponents(
    ::xrn::ecs::component::Container& components
)
{
    components.removeMany<ComponentTypes...>(m_id);
    m_signature.reset<ComponentTypes...>();
}
