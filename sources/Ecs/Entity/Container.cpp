///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <Ecs/Entity.hpp>


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::Container::Container(
    ::xrn::ecs::component::Container& components
)
    : m_components{ components }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Destructor
///
/// Clears every component of every entity.
///
///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::Container::~Container()
{
    this->clear();
}

///////////////////////////////////////////////////////////////////////////
/// \brief Copy constructor
///
///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::Container::Container(
    const ::xrn::ecs::entity::Container& that
) noexcept = default;

///////////////////////////////////////////////////////////////////////////
/// \brief Copy assign operator
///
///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::operator=(
    const ::xrn::ecs::entity::Container& that
) noexcept
    -> ::xrn::ecs::entity::Container&
{
    this->swap(::xrn::ecs::entity::Container{ that });
    return *this;
}

///////////////////////////////////////////////////////////////////////////
/// \brief Move constructor
///
///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::Container::Container(
    ::xrn::ecs::entity::Container&& that
) noexcept = default;

///////////////////////////////////////////////////////////////////////////
/// \brief Move assign operator
///
///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::operator=(
    ::xrn::ecs::entity::Container&& that
) noexcept
    -> ::xrn::ecs::entity::Container&
{
    this->swap(that);
    return *this;
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::swap(
    ::xrn::ecs::entity::Container& that
)
{
    ::std::swap(m_entities, that.m_entities);
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::swap(
    ::xrn::ecs::entity::Container&& that
)
{
    ::std::swap(m_entities, that.m_entities);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Remove
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::remove(
    ::xrn::Id entityId
)
{
    m_entities.erase(::std::ranges::find_if(
        m_entities,
        [this, entityId](auto& entity){
            if (entity.getId() == entityId) {
                entity.removeComponents(m_components);
                return true;
            }
            return false;
        }
    ));
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::remove(
    const ::xrn::ecs::Entity::Reference& entityReference
)
{
    m_entities.erase(::std::ranges::find_if(
        m_entities,
        [this, entityReference](auto& entity){
            if (&entity == &entityReference.get()) {
                entity.removeComponents(m_components);
                return true;
            }
            return false;
        }
    ));
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::remove(
    const ::xrn::ecs::Entity::ConstReference& entityReference
)
{
    m_entities.erase(::std::ranges::find_if(
        m_entities,
        [this, entityReference](auto& entity){
            if (&entity == &entityReference.get()) {
                entity.removeComponents(m_components);
                return true;
            }
            return false;
        }
    ));
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::clear()
{
    for (auto& entity : m_entities) {
        entity.removeComponents(m_components);
    }
    m_entities.clear();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Get
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::operator[](
    ::xrn::Id entityId
) const
    -> ::xrn::ecs::Entity::ConstReference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::ConstReference{};
    }
    return ::xrn::ecs::Entity::ConstReference{ *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::operator[](
    ::xrn::Id entityId
) -> ::xrn::ecs::Entity::Reference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::Reference{};
    }
    return ::xrn::ecs::Entity::Reference{ m_components, *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::get(
    ::xrn::Id entityId
) const
    -> ::xrn::ecs::Entity::ConstReference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::ConstReference{};
    }
    return ::xrn::ecs::Entity::ConstReference{ *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::get(
    ::xrn::Id entityId
) -> ::xrn::ecs::Entity::Reference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::Reference{};
    }
    return ::xrn::ecs::Entity::Reference{ m_components, *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::unsafeGet(
    ::xrn::Id entityId
) const
    -> ::xrn::ecs::Entity::ConstReference
{
    return ::xrn::ecs::Entity::ConstReference{ *::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::unsafeGet(
    ::xrn::Id entityId
) -> ::xrn::ecs::Entity::Reference
{
    return ::xrn::ecs::Entity::Reference{ m_components, *::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Contains
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::contains(
    ::xrn::Id entityId
) const
    -> bool
{
    return ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) != m_entities.end();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Iterators support
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::begin()
    -> Container::Type::iterator
{
    return m_entities.begin();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::begin() const
    -> Container::Type::const_iterator
{
    return m_entities.begin();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::cbegin() const
    -> Container::Type::const_iterator
{
    return m_entities.cbegin();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::end()
    -> Container::Type::iterator
{
    return m_entities.end();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::end() const
    -> Container::Type::const_iterator
{
    return m_entities.end();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::cend() const
    -> Container::Type::const_iterator
{
    return m_entities.cend();
}
