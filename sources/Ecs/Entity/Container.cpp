///////////////////////////////////////////////////////////////////////////
// Precompilled headers
///////////////////////////////////////////////////////////////////////////
#include <pch.hpp>

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <Ecs/Entity.hpp>


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::Container::Container(
    ::xrn::ecs::component::Container& components
)
    : m_components{ components }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Destructor
///
/// Clears every component of every entity.
///
///////////////////////////////////////////////////////////////////////////
::xrn::ecs::entity::Container::~Container()
{
    this->clear();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Remove
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::remove(
    ::xrn::Id entityId
)
{
    auto it{ ::std::ranges::find_if(
        m_entities, [this, entityId](auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it != m_entities.end()) {
        it->removeComponents(m_components);
        m_entities.erase(it);
    }
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::remove(
    const ::xrn::ecs::Entity::Reference& entityReference
)
{
    this->remove(entityReference.getId());
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::remove(
    const ::xrn::ecs::Entity::ConstReference& entityReference
)
{
    this->remove(entityReference.getId());
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::entity::Container::clear()
{
    for (auto& entity : m_entities) {
        entity.removeComponents(m_components);
    }
    m_entities.clear();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Get
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::operator[](
    ::xrn::Id entityId
) const
    -> ::xrn::ecs::Entity::ConstReference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::ConstReference{};
    }
    return ::xrn::ecs::Entity::ConstReference{ *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::operator[](
    ::xrn::Id entityId
) -> ::xrn::ecs::Entity::Reference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::Reference{};
    }
    return ::xrn::ecs::Entity::Reference{ m_components, *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::get(
    ::xrn::Id entityId
) const
    -> ::xrn::ecs::Entity::ConstReference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::ConstReference{};
    }
    return ::xrn::ecs::Entity::ConstReference{ *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::get(
    ::xrn::Id entityId
) -> ::xrn::ecs::Entity::Reference
{
    auto it{ ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
    if (it == m_entities.end()) {
        return ::xrn::ecs::Entity::Reference{};
    }
    return ::xrn::ecs::Entity::Reference{ m_components, *it };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::unsafeGet(
    ::xrn::Id entityId
) const
    -> ::xrn::ecs::Entity::ConstReference
{
    return ::xrn::ecs::Entity::ConstReference{ *::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::unsafeGet(
    ::xrn::Id entityId
) -> ::xrn::ecs::Entity::Reference
{
    return ::xrn::ecs::Entity::Reference{ m_components, *::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) };
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Contains
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::contains(
    ::xrn::Id entityId
) const
    -> bool
{
    return ::std::ranges::find_if(
        m_entities,
        [entityId](const auto& entity){ return entity.getId() == entityId; }
    ) != m_entities.end();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Iterators support
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::begin()
    -> Container::Type::iterator
{
    return m_entities.begin();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::begin() const
    -> Container::Type::const_iterator
{
    return m_entities.begin();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::cbegin() const
    -> Container::Type::const_iterator
{
    return m_entities.cbegin();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::end()
    -> Container::Type::iterator
{
    return m_entities.end();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::end() const
    -> Container::Type::const_iterator
{
    return m_entities.end();
}

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::entity::Container::cend() const
    -> Container::Type::const_iterator
{
    return m_entities.cend();
}
