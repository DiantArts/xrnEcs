#pragma once

#include <Ecs/Entity/Entity.hpp>


namespace xrn::ecs::component { class Container; }



///////////////////////////////////////////////////////////////////////////
/// \brief Contains all the entities
/// \ingroup ecs-entity
///
/// \include Reference.hpp <Ecs/Entity/Reference.hpp>
///
/// Refers to an ::xrn::ecs::Entity, the difference between a
/// ::xrn::ecs::Entity::Reference and a ::xrn::ecs::Entity::ConstReference
/// is that xrn::ecs::Entity::Reference contains a reference to a
/// ::xrn::ecs::component::Container that is passed to the constructor. It
/// allows actions like addComponent() and removeComponent() that are not
/// possible with ::xrn::ecs::Entity::ConstReference.
///
/// Usage example:
/// \code
/// \endcode
///
/// \see ::xrn::ecs::Entity, ::xrn::ecs::Entity::Reference,
///      ::xrn::ecs::component::Container
///
///////////////////////////////////////////////////////////////////////////
class xrn::ecs::Entity::ConstReference {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Constructs a xrn::ecs::Entity::ConstReference from an
    /// ::xrn::ecs::Entity.
    ///
    /// \param entity Entity that the class is refering to
    ///
    /// \see ::xrn::ecs::Entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit ConstReference(
        const ::xrn::ecs::Entity& entity
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // HasComponents
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the ::xrn::ecs::Entity referred has the component
    ///
    /// \tparam ComponentTypes Type of component to search
    ///
    /// \Return True if the component is contained by the entity
    ///
    /// \see ::xrn::ecs::Entity, ::xrn::ecs::Component
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent ComponentType
    > [[ nodiscard ]] auto hasComponent() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Checks if the ::xrn::ecs::Entity referred has multiple components
    ///
    /// \tparam ComponentTypes Type of component to search
    ///
    /// \Return True if the component is contained by the entity
    ///
    /// \see ::xrn::ecs::Entity, ::xrn::ecs::Component
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <
        ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
    > [[ nodiscard ]] auto hasComponents() const
        -> bool;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the signature of the ::xrn::ecs::Entity referred
    ///
    /// \see ::xrn::ecs::Entity, ::xrn::ecs::Signature
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getSignature() const
        -> const ::xrn::ecs::Signature&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the Id of the ::xrn::ecs::Entity referred
    ///
    /// \see ::xrn::ecs::Entity, ::xrn::Id
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getId() const
        -> ::xrn::Id;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Gets the ::xrn::ecs::Entity referred
    ///
    /// \see ::xrn::ecs::Entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto get() const
        -> const ::xrn::ecs::Entity&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Implicitly converts the refernce into the ::xrn::ecs::Entity
    /// referred
    ///
    /// \see ::xrn::ecs::Entity
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] operator const ::xrn::ecs::Entity&() const;




private:

    const ::xrn::ecs::Entity& m_entity;

};
