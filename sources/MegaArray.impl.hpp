#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::MegaArray::MegaArray()
    : m_memoryManager{ m_data }
    , m_data{ MegaArray::defaultBaseSize }
{}

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::MegaArray::MegaArray(
    ::std::size_t size
)
    : m_memoryManager{ m_data }
    , m_data{ size }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::MegaArray::~MegaArray() = default;

///////////////////////////////////////////////////////////////////////////
::xrn::ecs::component::MegaArray::MegaArray(
    ::xrn::ecs::component::MegaArray&& that
) noexcept = default;

///////////////////////////////////////////////////////////////////////////
auto ::xrn::ecs::component::MegaArray::operator=(
    ::xrn::ecs::component::MegaArray&& that
) noexcept
    -> ::xrn::ecs::component::MegaArray& = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Emplace
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent RawComponentType
> auto ::xrn::ecs::component::MegaArray::emplace(
    ::xrn::ecs::Entity& entity,
    auto&&... args
) -> ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>&
{
    return this->emplace<RawComponentType>(entity.getId(), ::std::forward<decltype(args)>(args)...);
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent RawComponentType
> auto ::xrn::ecs::component::MegaArray::emplace(
    const MegaArray::EntityId entityId,
    auto&&... args
) -> ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>&
{
    using ComponentType = ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>;
    return *new(m_memoryManager.alloc<ComponentType>(entityId)) ComponentType{
        ::std::forward<decltype(args)>(args)...
    };
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::component::MegaArray::emplaceMany(
    ::xrn::ecs::Entity& entity
)
{
    (this->emplace<ComponentTypes>(entity.getId()), ...);
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::component::MegaArray::emplaceMany(
    const MegaArray::EntityId entityId
)
{
    (this->emplace<ComponentTypes>(entityId), ...);
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::MegaArray::push(
    ::xrn::ecs::Entity& entity,
    ::xrn::ecs::detail::constraint::isComponent auto&& component
)
{
    return this->push(entity.getId(), ::std::forward<decltype(component)>(component));
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::MegaArray::push(
    const MegaArray::EntityId entityId,
    ::xrn::ecs::detail::constraint::isComponent auto&& component
)
{
    new(m_memoryManager.alloc<decltype(component)>(entityId)) decltype(component){ ::std::move(component) };
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::MegaArray::pushMany(
    ::xrn::ecs::Entity& entity,
    ::xrn::ecs::detail::constraint::isComponent auto&&... components
)
{
    (this->push(entity.getId(), components), ...);
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::MegaArray::pushMany(
    const MegaArray::EntityId entityId,
    ::xrn::ecs::detail::constraint::isComponent auto&&... components
)
{
    (this->push(entityId, components), ...);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Remove
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent RawComponentType
> void ::xrn::ecs::component::MegaArray::remove(
    ::xrn::ecs::Entity& entity
)
{
    this->remove<RawComponentType>(entity.getId());
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent RawComponentType
> void ::xrn::ecs::component::MegaArray::remove(
    const MegaArray::EntityId entityId
)
{
    using ComponentType = ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>;
    m_memoryManager.free<ComponentType>(entityId);
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::component::MegaArray::removeMany(
    ::xrn::ecs::Entity& entity
)
{
    (this->remove<ComponentTypes>(entity.getId()), ...);
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::component::MegaArray::removeMany(
    const MegaArray::EntityId entityId
)
{
    (this->remove<ComponentTypes>(entityId), ...);
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Clear
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent RawComponentType
> void ::xrn::ecs::component::MegaArray::clear()
{
    using ComponentType = ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>;
    m_memoryManager.clear<ComponentType>();
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::component::MegaArray::clear()
{
    (this->clear<ComponentTypes>(), ...);
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> void ::xrn::ecs::component::MegaArray::clearMany()
{
    (this->clear<ComponentTypes>(), ...);
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::MegaArray::clear()
{
    this->clearAll();
}

///////////////////////////////////////////////////////////////////////////
void ::xrn::ecs::component::MegaArray::clearAll()
{
    m_memoryManager.clear();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Accessors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent ComponentType
> auto ::xrn::ecs::component::MegaArray::get(
    ::xrn::ecs::Entity& entity
) -> ::std::remove_cvref_t<::std::remove_pointer_t<ComponentType>>*
{
    return this->get<ComponentType>(entity.getId());
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent RawComponentType
> auto ::xrn::ecs::component::MegaArray::get(
    const MegaArray::EntityId entityId
) -> ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>*
{
    using ComponentType = ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>;
    return static_cast<ComponentType*>(m_memoryManager.getAddr<ComponentType>(entityId));
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent ComponentType
> auto ::xrn::ecs::component::MegaArray::contains(
    ::xrn::ecs::Entity& entity
) -> bool
{
    return this->contains<ComponentType>(entity.getId());
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent RawComponentType
> auto ::xrn::ecs::component::MegaArray::contains(
    const MegaArray::EntityId entityId
) -> bool
{
    using ComponentType = ::std::remove_cvref_t<::std::remove_pointer_t<RawComponentType>>;
    return m_memoryManager.exists<ComponentType>(entityId);
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> auto ::xrn::ecs::component::MegaArray::contains(
    ::xrn::ecs::Entity& entity
) -> bool
{
    return (this->contains<ComponentTypes>(entity.getId()) && ...);
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::ecs::detail::constraint::isComponent... ComponentTypes
> auto ::xrn::ecs::component::MegaArray::contains(
    const MegaArray::EntityId entityId
) -> bool
{
    return (this->contains<ComponentTypes>(entityId) && ...);
}
