#include <boost/functional/hash.hpp>

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// static elements
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> struct xrn::util::BasicForwardId<T>::Hasher {

    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator()(
        const ::xrn::util::BasicForwardId<T>& id
    ) const
        -> ::std::size_t
    {
        ::std::size_t seed = 0;
        ::boost::hash_combine(seed, id.get());
        return seed;
    }

};



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr ::xrn::util::BasicForwardId<T>::BasicForwardId(
    auto value
) noexcept
    : m_value{ static_cast<::xrn::util::BasicForwardId<T>::Type>(value) }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Getters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicForwardId<T>::get() const
    -> ::xrn::util::BasicForwardId<T>::Type
{
    return m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> auto ::xrn::util::BasicForwardId<T>::getAsString() const
    -> ::std::string
{
    return ::std::to_string(m_value);
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr ::xrn::util::BasicForwardId<T>::operator ::xrn::util::BasicForwardId<T>::Type() const
{
    return this->get();
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> ::xrn::util::BasicForwardId<T>::operator ::std::string() const
{
    return this->getAsString();
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Operations
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicForwardId<T>::operator++()
    -> xrn::util::BasicForwardId<T>&
{
    ++m_value;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicForwardId<T>::operator++(
    int
) -> xrn::util::BasicForwardId<T>
{
    auto value{ m_value };
    ++m_value;
    return *this;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr void ::xrn::util::BasicForwardId<T>::increment()
{
    ++m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicForwardId<T>::operator<=>(
    const ::xrn::util::BasicForwardId<T>& other
) const
    -> ::std::strong_ordering
{
    return m_value <=> other.m_value;
}

///////////////////////////////////////////////////////////////////////////
template <
    typename T
> constexpr auto ::xrn::util::BasicForwardId<T>::operator<=>(
    const auto& other
) const
    -> ::std::strong_ordering
{
    return m_value <=> static_cast<BasicForwardId<T>::Type>(other);
}
