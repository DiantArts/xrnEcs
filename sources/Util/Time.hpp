#pragma once

namespace xrn::util {

///////////////////////////////////////////////////////////////////////////
/// \brief Representation of the time in the xrn Project
/// \ingroup util
///
/// \include Time.hpp <Util/Time.hpp>
///
/// ::xrn::util::Time's purpuse is to represent and uniform time manipulations
/// accross all xrn Projects.
/// Its usage is straight forward as it just contains a Time value, gettable
/// as seconds, milliseconds or microseconds. It also is possible to perform
/// calculations between time values. By default, xrn projects manipulate
/// milliseconds, and if the same type as the template parameter of the calss
/// is passed to one of the methods, it will be interpreted as such.
/// The class can be constructed by the factories createAsSeconds(),
/// createAsMilliseconds() and with a constructor with the type given as
/// template parameter.
/// This class is mostly used by ::xrn::util::Clock, but can be used manually.
///
/// Usage example:
/// \code
/// using ::xrn::util::TimeLiteral::operator""_ns;
///
/// auto t1{ ::xrn::Time::createAsSeconds(0.1) };
/// auto t2{ t1.getAsMilliseconds() }; // 100ms
/// ::xrn::Time t3{ 30u };
/// auto t4{ t3.getAsMicroseconds() }; // 30000ms
/// auto t5{ ::xrn::Time::createAsNanoseconds(-800000) }; // -0.8
/// auto t6{ t5.getAsSeconds() }; // -0.0008ms
/// auto t7{ t1 + ::xrn::Time::createAsSeconds(t6) }; // 99.2ms
/// auto t8{ t1 + -800000_ns }; // 99.2ms
/// auto t9{ t1 + t5 }; // 99.2ms
/// auto t10{ t1 + 55 }; // 155ms
/// auto t11{ 55 + t1 }; // 155ms
/// \endcode
///
/// \see ::xrn::util::Clock
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> class BasicTime {

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // static elements
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Type internally contained by the class ::xrn::util::Time
    ///
    ///////////////////////////////////////////////////////////////////////////
    using Type = T;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a ::xrn::util::Time from a value evaluated as seconds
    ///
    /// \param amount Value contructed from the amount of seconds
    ///
    /// \see createAsMilliseconds(), createAsMicroseconds(),
    /// createAsNanoseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr static auto createAsSeconds(
        BasicTime<T>::Type amount
    ) -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a ::xrn::util::Time from a value evaluated as
    /// milliseconds
    ///
    /// \param amount Value contructed from the amount of milliseconds
    ///
    /// \see createAsSeconds(), createAsMicroseconds(), createAsNanoseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr static auto createAsMilliseconds(
        BasicTime<T>::Type amount
    ) -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a ::xrn::util::Time from a value evaluated as
    /// microseconds
    ///
    /// \param amount Value contructed from the amount of microseconds
    ///
    /// \see createAsSeconds(), createAsMilliseconds(), createAsNanoseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr static auto createAsMicroseconds(
        BasicTime<T>::Type amount
    ) -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a ::xrn::util::Time from a value evaluated as
    /// nanoseconds
    ///
    /// \param amount Value contructed from the amount of nanoseconds
    ///
    /// \see createAsSeconds(), createAsMilliseconds(), createAsNanoseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr static auto createAsNanoseconds(
        BasicTime<T>::Type amount
    ) -> ::xrn::util::BasicTime<T>;



public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // *structors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor from a Time::Type
    ///
    /// Constructs a ::xrn::util::Time containing a point in time
    ///
    /// \param amount Time in milliseconds
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit constexpr BasicTime(
        auto amount
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Comparison
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Compares with an ::xrn::util::Time values
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator<=>(
        const ::xrn::util::BasicTime<T>& rhs
    ) const
        -> ::std::weak_ordering;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Compares with an internal representation of an ::xrn::util::Time
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator<=>(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::std::partial_ordering;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Get
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Convertion to the type internally stored
    ///
    /// \see get(), getAsMilliseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr operator BasicTime<T>::Type() noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as it's internally stored
    ///
    /// \return Time in milliseconds
    ///
    /// \see getAsMilliseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto get() const
        -> BasicTime<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as seconds
    ///
    /// \return Value as second as the internally stored type
    ///
    /// \see get(), getAsMilliseconds(), getAsMicroseconds(),
    /// getAsNanoseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto getAsSeconds() const
        -> BasicTime<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as milliseconds
    ///
    /// \return Value as second as the internally stored type
    ///
    /// \see get(), getAsSeconds(), getAsMicroseconds(), getAsNanoseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto getAsMilliseconds() const
        -> BasicTime<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as milliseconds
    ///
    /// \return Value as second as the internally stored type
    ///
    /// \see get(), getAsSeconds(), getAsMilliseconds(), getAsNanoseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto getAsMicroseconds() const
        -> BasicTime<T>::Type;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the value as milliseconds
    ///
    /// \return Value as second as the internally stored type
    ///
    /// \see get(), getAsSeconds(), getAsMilliseconds(), getAsMicroseconds()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto getAsNanoseconds() const
        -> BasicTime<T>::Type;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Set
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the internal point time value to a new one
    ///
    /// \param amount New time in milliseconds
    ///
    /// \see set()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator=(
        const BasicTime<T>::Type& amount
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the internal point time value to a new one
    ///
    /// \param amount New time in milliseconds
    ///
    /// \see operator=()
    ///
    ///////////////////////////////////////////////////////////////////////////
    void set(
        const ::xrn::util::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Sets the internal point time value to a new one
    ///
    /// \param amount New time in milliseconds
    ///
    /// \see operator=()
    ///
    ///////////////////////////////////////////////////////////////////////////
    void set(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Add
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds ::xrn::util::Time given as parameter
    ///
    /// \param rhs Time to add
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator+=(
        const ::xrn::util::BasicTime<T>& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds time as milliseconds given as parameter
    ///
    /// \param rhs Time to add in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator+=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds ::xrn::util::Time given as parameter
    ///
    /// Same as add, but does return a copy
    ///
    /// \param rhs Time to add
    ///
    /// \return New time added with \a rhs
    ///
    /// \see add()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator+(
        const ::xrn::util::BasicTime<T>& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds time as milliseconds given as parameter
    ///
    /// Same as add, but does return a copy
    ///
    /// \param rhs Time to add in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see add()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator+(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds ::xrn::util::Time given as parameter
    ///
    /// Adds the amount given as parameter.
    ///
    /// \param rhs Time to add
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void add(
        const ::xrn::util::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Adds time as milliseconds given as parameter
    ///
    /// Adds the amount given as parameter.
    ///
    /// \param rhs Time to add in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void add(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Sub
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts ::xrn::util::Time given as parameter
    ///
    /// \param rhs Time to substract
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator-=(
        const ::xrn::util::BasicTime<T>& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts time as milliseconds given as parameter
    ///
    /// \param rhs Time to substract in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator-=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts ::xrn::util::Time given as parameter
    ///
    /// Same as substract, but does return a copy
    ///
    /// \param rhs Time to substract
    ///
    /// \return New time added with \a rhs
    ///
    /// \see sub()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator-(
        const ::xrn::util::BasicTime<T>& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts time as milliseconds given as parameter
    ///
    /// Same as substract, but does return a copy
    ///
    /// \param rhs Time to substract in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see sub()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator-(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts ::xrn::util::Time given as parameter
    ///
    /// Substracts the amount given as parameter.
    ///
    /// \param rhs Time to substract
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void sub(
        const ::xrn::util::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Substracts time as milliseconds given as parameter
    ///
    /// Substracts the amount given as parameter.
    ///
    /// \param rhs Time to substract in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void sub(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Mul
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates ::xrn::util::Time given as parameter
    ///
    /// \param rhs Time to multiply
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator*=(
        const ::xrn::util::BasicTime<T>& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates time as milliseconds given as parameter
    ///
    /// \param rhs Time to multiply in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator*=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates ::xrn::util::Time given as parameter
    ///
    /// Same as multiply, but does return a copy
    ///
    /// \param rhs Time to multiply
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mul()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator*(
        const ::xrn::util::BasicTime<T>& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates time as milliseconds given as parameter
    ///
    /// Same as multiply, but does return a copy
    ///
    /// \param rhs Time to multiply in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mul()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator*(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates ::xrn::util::Time given as parameter
    ///
    /// Multiplicates the amount given as parameter.
    ///
    /// \param rhs Time to multiply
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mul(
        const ::xrn::util::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Multiplicates time as milliseconds given as parameter
    ///
    /// Multiplicates the amount given as parameter.
    ///
    /// \param rhs Time to multiply in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mul(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Div
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides ::xrn::util::Time given as parameter
    ///
    /// \param rhs Time to divide
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator/=(
        const ::xrn::util::BasicTime<T>& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides time as milliseconds given as parameter
    ///
    /// \param rhs Time to divide in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator/=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides ::xrn::util::Time given as parameter
    ///
    /// Same as divide, but does return a copy
    ///
    /// \param rhs Time to divide
    ///
    /// \return New time added with \a rhs
    ///
    /// \see div()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator/(
        const ::xrn::util::BasicTime<T>& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides time as milliseconds given as parameter
    ///
    /// Same as divide, but does return a copy
    ///
    /// \param rhs Time to divide in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see div()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator/(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides ::xrn::util::Time given as parameter
    ///
    /// Divides the amount given as parameter.
    ///
    /// \param rhs Time to divide
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void div(
        const ::xrn::util::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Divides time as milliseconds given as parameter
    ///
    /// Divides the amount given as parameter.
    ///
    /// \param rhs Time to divide in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void div(
        const BasicTime<T>::Type& amount
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Mod
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos ::xrn::util::Time given as parameter
    ///
    /// \param rhs Time to modulo
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator%=(
        const ::xrn::util::BasicTime<T>& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos time as milliseconds given as parameter
    ///
    /// \param rhs Time to modulo in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto operator%=(
        const BasicTime<T>::Type& rhs
    ) -> ::xrn::util::BasicTime<T>&;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos ::xrn::util::Time given as parameter
    ///
    /// Same as modulo, but does return a copy
    ///
    /// \param rhs Time to modulo
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mod()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator%(
        const ::xrn::util::BasicTime<T>& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos time as milliseconds given as parameter
    ///
    /// Same as modulo, but does return a copy
    ///
    /// \param rhs Time to modulo in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    /// \see mod()
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] constexpr auto operator%(
        const BasicTime<T>::Type& rhs
    ) const
        -> ::xrn::util::BasicTime<T>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos ::xrn::util::Time given as parameter
    ///
    /// Modulos the amount given as parameter.
    ///
    /// \param rhs Time to modulo
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mod(
        const ::xrn::util::BasicTime<T>& amount
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Modulos time as milliseconds given as parameter
    ///
    /// Modulos the amount given as parameter.
    ///
    /// \param rhs Time to modulo in milliseconds
    ///
    /// \return New time added with \a rhs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void mod(
        const BasicTime<T>::Type& amount
    );



private:

    BasicTime<T>::Type m_time;

};

} // namespace xrn::util



///////////////////////////////////////////////////////////////////////////
// Template specialization
///////////////////////////////////////////////////////////////////////////
namespace xrn::util { using Time = ::xrn::util::BasicTime<double>; }
namespace xrn { using Time = ::xrn::util::Time; }



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// External types operators
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Adds ::xrn::Time given as parameter
///
/// Same as add, but does return a copy
///
/// \param lhs Template value to add to \a rhs
/// \param rhs Time having its value being added by \a lhs
///
/// \return New time added with \a rhs
///
/// \see add()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator+(
    auto lhs,
    const ::xrn::util::BasicTime<T>& rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Adds ::xrn::Time given as parameter
///
/// Same as add, but does return a copy
///
/// \param lhs Time having its value being added by \a rhs
/// \param rhs Template value to add to \a lhs
///
/// \return New time added with \a rhs
///
/// \see add()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator+(
    const ::xrn::util::BasicTime<T>& lhs,
    auto rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Substracts ::xrn::Time given as parameter
///
/// Same as substract, but does return a copy
///
/// \param lhs Template value to add to \a rhs
/// \param rhs Time having its value being added by \a lhs
///
/// \return New time added with \a rhs
///
/// \see sub()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator-(
    auto lhs,
    const ::xrn::util::BasicTime<T>& rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Substracts ::xrn::Time given as parameter
///
/// Same as substract, but does return a copy
///
/// \param rhs Time having its value being added by \a rhs
/// \param lhs Template value to add to \a lhs
///
/// \return New time added with \a rhs
///
/// \see sub()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator-(
    const ::xrn::util::BasicTime<T>& lhs,
    auto rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Multiplicates ::xrn::Time given as parameter
///
/// Same as multiply, but does return a copy
///
/// \param lhs Template value to add to \a rhs
/// \param rhs Time having its value being added by \a lhs
///
/// \return New time added with \a rhs
///
/// \see mul()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator*(
    auto lhs,
    const ::xrn::util::BasicTime<T>& rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Multiplicates ::xrn::Time given as parameter
///
/// Same as multiply, but does return a copy
///
/// \param rhs Time having its value being added by \a rhs
/// \param lhs Template value to add to \a lhs
///
/// \return New time added with \a rhs
///
/// \see mul()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator*(
    const ::xrn::util::BasicTime<T>& lhs,
    auto rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Divides ::xrn::Time given as parameter
///
/// Same as divide, but does return a copy
///
/// \param lhs Template value to add to \a rhs
/// \param rhs Time having its value being added by \a lhs
///
/// \return New time added with \a rhs
///
/// \see div()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator/(
    auto lhs,
    const ::xrn::util::BasicTime<T>& rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Divides ::xrn::Time given as parameter
///
/// Same as divide, but does return a copy
///
/// \param rhs Time having its value being added by \a rhs
/// \param lhs Template value to add to \a lhs
///
/// \return New time added with \a rhs
///
/// \see div()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator/(
    const ::xrn::util::BasicTime<T>& lhs,
    auto rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Modulos time as milliseconds given as parameter
///
/// Same as modulo, but does return a copy
///
/// \param lhs Template value to add to \a rhs
/// \param rhs Time having its value being added by \a lhs
///
/// \return New time added with \a rhs
///
/// \see mod()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator%(
    auto lhs,
    const ::xrn::util::BasicTime<T>& rhs
) -> ::xrn::util::BasicTime<T>;

///////////////////////////////////////////////////////////////////////////
/// \brief Modulos time as milliseconds given as parameter
///
/// Same as modulo, but does return a copy
///
/// \param rhs Time having its value being added by \a rhs
/// \param lhs Template value to add to \a lhs
///
/// \return New time added with \a rhs
///
/// \see mod()
///
///////////////////////////////////////////////////////////////////////////
template <
    typename T
> [[ nodiscard ]] constexpr auto operator%(
    const ::xrn::util::BasicTime<T>& lhs,
    auto rhs
) -> ::xrn::util::BasicTime<T>;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Litteral definitions
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

namespace xrn::util::TimeLiteral {

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsSeconds()
///
/// \param amount Value contructed from the amount of seconds
///
/// \see ::xrn::Time::createAsSeconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_s(
    long double amount
) -> ::xrn::Time;

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsSeconds()
///
/// \param amount Value contructed from the amount of seconds
///
/// \see ::xrn::Time::createAsSeconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_s(
    long long unsigned amount
) -> ::xrn::Time;

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsMilliseconds()
///
/// \param amount Value contructed from the amount of milliseconds
///
/// \see ::xrn::Time::createAsMilliseconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_ms(
    long double amount
) -> ::xrn::Time;

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsMilliseconds()
///
/// \param amount Value contructed from the amount of milliseconds
///
/// \see ::xrn::Time::createAsMilliseconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_ms(
    long long unsigned amount
) -> ::xrn::Time;

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsMicroseconds()
///
/// \param amount Value contructed from the amount of microseconds
///
/// \see ::xrn::Time::createAsMicroseconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_us(
    long double amount
) -> ::xrn::Time;

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsMicroseconds()
///
/// \param amount Value contructed from the amount of microseconds
///
/// \see ::xrn::Time::createAsMicroseconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_us(
    long long unsigned amount
) -> ::xrn::Time;

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsNanoseconds()
///
/// \param amount Value contructed from the amount of nanoseconds
///
/// \see ::xrn::Time::createAsNanoseconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_ns(
    long double amount
) -> ::xrn::Time;

///////////////////////////////////////////////////////////////////////////
/// \brief Alias for the ::xrn::Time::createAsNanoseconds()
///
/// \param amount Value contructed from the amount of nanoseconds
///
/// \see ::xrn::Time::createAsNanoseconds()
///
///////////////////////////////////////////////////////////////////////////
[[ nodiscard ]] constexpr auto operator""_ns(
    long long unsigned amount
) -> ::xrn::Time;



} // namespace xrn::util::literal



///////////////////////////////////////////////////////////////////////////
// Header-implimentation
///////////////////////////////////////////////////////////////////////////
#include <Util/Time.impl.hpp>
